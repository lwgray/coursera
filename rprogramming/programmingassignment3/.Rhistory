b <- colnames('b')
b
b <- as.data.frame(a$Species)
head(b)
names(b) <- "b"
b
head(b)
c <- c(a, b)
c
tapply(a, a$b)
len(a$b)
length(a$b)
iris
mean(iris$Sepal.Width[51:150, mean()])
mean(iris$Sepal.Width[51:150], mean()])
mean(iris$Sepal.Width[51:150], mean())
mean(iris$Sepal.Length)
iris$Sepal.Length[51]
iris$Sepal.Length[51:150]
mean(iris$Sepal.Length[51:150])
mean(iris$Sepal.Width[51:])
mean(iris$Sepal.Width[51:150])
mean(iris$Sepal.Length[51:150])
tapply(iris, iris$Species, mean, simplify = TRUE)
length(iris$Species)
mapply(c(iris$Species, iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width), length)
mapply(length, c(iris$Species, iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width), length)
mapply(c(iris$Species, iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))
mapply(length, (c(iris$Species, iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)))
mapply(nrow, (c(iris$Species, iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)))
Vectorize(mapply(nrow, (c(iris$Species, iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))))
head(iris)
5*150
string(iris$Species)
str(iris$Species)
a <- str(iris$Species)
head(a)
a
a
iris$Species
iris$Sepal.Length
tapply(iris,iris$Species)
library(datasets)
data(iris)
class(iris$Species)
tapply(iris$Sepal.Length, iris$Species)
?tapply
tapply(iris$Sepal.Length, iris$Species, mean())
tapply(iris$Sepal.Length, iris$Species, mean)
datasets(mtcars)
data("mtcars")
rm(ls())
ls()
lapply(c(ls()), rm)
lapply(ls(), rm)
mtcars
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
a <- tapply(mtcars$hp, mtcars$cyl, mean)
a
a$['4'] - a$['8']
a$'4' - a$'8'
class(a)
names(a)
a[1]
a[1] - a[3]
a[3]
a[3]-a[1]
function() x
get <- function() x
get
source('~/.active-rstudio-document')
set(1)
source('~/.active-rstudio-document')
set(1)
set(1:10)
set(as.numeric(1:10))
get <- function() x
get
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
setmean(1)
getmean()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
debug(makeVector)
traceback()
source('~/.active-rstudio-document')
traceback
traceback(makeVector)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
makeVector(1:10)
makeVector(c(1:10))
makeVector(7)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
makeVector(1)
makeVector(1:10)
source('~/.active-rstudio-document')
cachemean(1:10)
cachemean(1)
Cachemean(makeVector())
Cachemean(makeVector)
cachemean(makeVector)
cachemean(makeVector())
cachemean(makeVector(1))
cachemean(makeVector(1))
cachemean(makeVector(2))
cachemean(makeVector(1:10))
cachemean(makeVector(2))
cachemean(makeVector(c(1,4,4)))
m
x <- cachemean(makeVector(c(1,4,4)))
x
x <- cachemean(makeVector(c(1,4,4,1)))
x
x
x <- cachemean(makeVector(c(2)))
x
cachemean(makeVector(c(2)))
mean(2)
rm(a)
rm(b)
rm(iris)
rm(mtcars)
rm(s)
rm(c)
rm(d)
rm(e)
ls()
cachemean(1:10)
cachemean(makeVector(c(2)))
cachemean(makeVector(c(1:30)))
x <- cachemean(makeVector(c(1:30)))
x <- cachemean(makeVector((1:5)))
m
x <- cachemean(makeVector((1)))
m
x <- cachemean(makeVector((1:10)))
m
x <- cachemean(makeVector((10:20)))
matrix(1:6, 2, 2)
solve(matrix(1:4, 2, 2))
source('~/.active-rstudio-document')
MakeCacheMatrix(matrix(1:4, 2,2))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
cacheSolve(MakeCacheMatrix(matrix(1:4, 2, 2)))
source('~/.active-rstudio-document')
cacheSolve(MakeCacheMatrix(matrix(1:4, 2, 2)))
cacheSolve
MakeCacheMatrix()
m
cacheSolve(MakeCacheMatrix(matrix(1:6, 2, 3)))
cacheSolve(MakeCacheMatrix(matrix(1:6, 3, 3)))
cacheSolve(MakeCacheMatrix(matrix(1:6, 2, 2)))
cacheSolve(MakeCacheMatrix(matrix(c(5,7,9,10), 2, 2)))
solve(matrix(c(5,7,9,10), 2, 2))
c <- matrix(1:6, 2, 2)
c <- matrix(1:4, 2, 2)
solve(c)
cacheSolve(MakeCacheMatrix(c))
c
makeVector(1:4)
m
makeVector(c(1, 2, 3, 4, 5))
m
cacheSolve(1:4)
View(setmean)
View(set)
cacheSolve(matrix(1:4, 2, 2))
a <- MakeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(a)
b <- matrix(c(1,2,3,4))
b
b <- matrix(c(1,2,3,4), 2, 2)
b
cacheSolve(b)
class(b)
class(a)
MakeCacheMatrix(b)
cacheSolve(b)
b <- MakeCacheMatrix(b)
cacheSolve(b)
cacheSolve(b)
cacheSolve(b)
b
cacheSolve(b)
c <- matrix(c(2,3,4,5)2, 2)
c <- matrix(c(2,3,4,5), 2, 2)
c
c <- MakeCacheMatrix(c)
rm(b)
cacheSolve(c)
class(a)
rm(x)
rm (m)
cacheSolve(MakeCacheMatrix(a))
cacheSolve(MakeCacheMatrix(c))
c <- matrix(1:4, 2, 2)
c <- matrix(1:4, 2, 2)
MakeCacheMatrix(c)
c <- MakeCacheMatrix(c)
cacheSolve(c)
c <- matrix(c(2,3,4,5), 2, 2)
cacheSolve(MakeCacheMatrix(c))
r = rnorm(100000)
r
mat1 = matrix(r, 1000, 1000)
mat1
source('~/.active-rstudio-document')
cacheSolve(MakeCacheMatrix(matrix(1:4, 2, 2)))
a <- matrix(1:4, 2, 2)
cacheSolve(MakeCacheMatrix(a))
source('~/.active-rstudio-document')
a <- matrix(1:4, 2, 2)
cacheSolve(MakeCacheMatrix(a))
source('~/.active-rstudio-document')
test(mat1)
source('~/.active-rstudio-document')
test(mat1)
test(a)
test(matrix(rnorm(9), 3, 3))
test(matrix(rnorm(100), 10, 10))
a <- matrix(4, 2, 2)
b <- matrix(400, 20, 20)
c <- matrix(4000, 200, 2000)
c <- matrix(4000, 200, 200)
d <- matrix(40000, 2000, 2000)
d <- matrix(40000, 200, 200)
View(c)
View(c)
rm(c)
a <- matrix(1:4, 2, 2)
b <- matrix(1:400, 20, 20)
c <- matrix(1:40000, 200, 200)
rm(d)
d <- MakeCacheMatrix(a)
e <- makeActiveBinding(b)
e <- MakeCacheMatrix(b)
f <- MakeCacheMatrix(c)
cacheSolve(d)
cacheSolve(e)
cacheSolve(f)
test(a)
test(b)
f
View(mat1)
rm(r)
ls()
rm(mat1)
rm("set")
rm("get", "d")
rm("getmean")
rm("test")
rm("setmean")
rm(cachemean)
rm(cacheSolve)
rm(makeVector())
rm(makeVector
)
rm(MakeCacheMatrix)
source('~/.active-rstudio-document')
temp <- MakeCacheMatrix(c)
cacheSolve(temp)
temp <- MakeCacheMatrix(b)
cacheSolve(temp)
a
b
set.seed(1110201)
r = rnorm(1000000)
mat1 <- matrix(r, nrow=1000, ncol=1000)
test(mat1)
test(mat1)
test(mat1)
test(mat1)
cacheSolve(mat1)
mat1
source('~/.active-rstudio-document')
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source('C:/Users/lwgra/Desktop/Coursera/Week_3_R_hw.R')
cacheSolve(MakeCacheMatrix(matrix(1:4, 2, 2)))
source('C:/Users/lwgra/Desktop/Coursera/Week_3_R_hw.R')
cacheSolve(MakeCacheMatrix(matrix(1:4, 2, 2)))
cacheSolve(MakeCacheMatrix(matrix(1:4, 2, 2)))
source('C:/Users/lwgra/Desktop/Coursera/Week_3_R_hw.R')
cacheSolve(MakeCacheMatrix(matrix(1:4, 2, 2)))
pwd
wd
getwd()
setwd('c://users//lwgra//desktop/Coursera/programmingassignment3/')
getwd()
ls()
dir()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
names(outcome)
class(outcome[,11])
outcome[,11] <- as.numeric(outcome[,11])
class(outcome[,11])
hist(outcome[,11])
summary(outcome[,11])
names(outer())
names(outcome)
tapply(outcome$State, outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
head(outcome, 10)
tapply(outcome, outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
tapply(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome$State)
mapply(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome$State)
lapply(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome$State)
?apply\
?apply
?tapply
?gsl
?gls
?split
split(outcome, outcome$State)
state = 'MD'
ls()
rm "state"
rm state
state
if (state in outcome$State) {print('Yes')}
if (state %in% outcome$State) {print('Yes')}
split(outcome$state, outcome$Hospital.30.Day.Readmission.Rates.from.Heart.Attack)
split(outcome$State, outcome$Hospital.30.Day.Readmission.Rates.from.Heart.Attack)
split(outcome$Hospital.30.Day.Readmission.Rates.from.Heart.Attack, outcome$State)
split(outcome$Hospital.30.Day.Readmission.Rates.from.Heart.Attack, outcome$State)
source('~/.active-rstudio-document')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
getwd()
best('LA', 'heart attack')
state
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('LA', 'heart attack')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('LA', 'heart attack')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('LA', 'heart attack')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('LA', 'heart attack')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('LA', 'heart')
best('HI', 'heart attack')
best('HW', 'heart attack')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('HW', 'heart attack')
best('HI', 'heart attack')
x <- 1:20
x
y <- factor(rep(letters[1:5], each = 4))
y
tapply(x, y, sum)
head(input)
head(outcome)
conditions <- c(c('heart attack', 1), c('pneumonia', 2))
'heart attack' in conditions
'heart attack' %in% conditions
1 %in% conditions
3 %in% conditions
lapply(outcome$State, outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
newdata <- outcome[which(outcome$State==state & !is.null(outcome$Hospital.30.Day.Readmission.Rates.from.Pneumonia))]
newdata <- outcome[which(outcome$State==state]
newdata <- outcome[which(outcome$State==state)]
newdata <- outcome[which(outcome$State==state)]
x <- outcome$State
head(x)
state
outcome$State['MD']
class(outcome$State)
outcome[which(outcome$State == state)]
state %in% outcome$State
outcome[which(outcome$State == state),]
outcome[1]
head(outcome[1])
outcome[which(outcome$State == state & !is.null(outcome[11])),]
outcome[which(outcome$State == state & outcome[11] > 0,]
outcome[which(outcome$State == state & outcome[11] > 0),]
outcome[which(outcome$State == state & is.null(outcome[11]),]
outcome[which(outcome$State == state & is.null(outcome[11])),]
outcome[which(outcome$State == state & outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),]
outcome[which(outcome$State == state & outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
outcome[which(outcome$State == state && outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
x <- outcome[which(outcome$State == state && outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
x
x <- outcome[which(outcome$State == state & outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
class(x)
head(x)
x['State']
x$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
sum(x$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
min(x$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
x$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
x[1,2,3]
x[2]
x[1]
x[1,2,3]
x[2]
a = 1.5
b = 2.5
c = 1.5
d = 3.5
min(a,b,c,d)
z <- data.frame(a, b,c,d, row.names = 1:4)
z <- data.frame(a, b,c,d, row.names = c(1, 2, 3, 4))
z <- data.frame(c(a, b,c,d), row.names = c(1, 2, 3, 4))
z
z <- data.frame(c(a, b,c,d), row.names = c(a, b, c, d))
index <- c(a, b, c, d)
index
z <- data.frame(index, row.names = c(a, b, c, d))
z <- data.frame(index, row.names = c(1, 2, 3, 4))
z
min(z['index'])
z[z$index == min(z$index)]
min(z$index)
z[which(z$index == min(z$index))]
x <- outcome[which(outcome$State == state & outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
w <- z[which(z$index == min(z$index))]
colnames()
colnames(z)
class(z$index)
z$[index]][1]
z$[index][1]
z$index[1]
z$index[1] == min(z$index)
z$index[2] == min(z$index)
z$index[3] == min(z$index)
z$index[4] == min(z$index)
tapply(z$index, z, min)
w <- z[which(z$index == min(z$index))]
w <- z[which(z$index = min(z$index))]
w <- z[which(z$index == min(z$index))]
w <- z[which(z$index !== min(z$index))]
w <- z[which(z$index != min(z$index))]
w <- z[which(z$index == min(z$index))]
z
head(x)
x$Hospital.Name[x$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia == min(x$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)]
x[2][x[11]]
class(x[2])
x <- outcome[outcome$state == state]
x[1:5,]
x
x <- outcome[outcome$state == state,]
x
x[0]
x
x <- outcome[which(outcome$State == state & outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
x <- outcome[which(outcome$state == state),]
x[1:5,]
x[,1:5]
x
x <- outcome[which(outcome$state == state & outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
x
x <- outcome[which(outcome$State == state & outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack > 0),]
x
x <- outcome[which(outcome$State == state),]
x
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('MD', 'heart attack')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('MD', 'heart attack')
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('MD', 'heart attack')
y <- outcome[which(outcome$State == state),]
y
y
z <- y[which(!is.null(y[11])),]
z
unlist(z)
colnames(z)
class(z)
rownames(z)
z$State
z$Hospital.Name
z <- y[which(y[11] > 0),]
z
z$Provider.Number
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
best('MD', 'heart attack')
z <- best('MD', 'heart attack')
z$State
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
z <- best('MD', 'heart attack')
z$Hospital.Name[which(z[11] == min(z[11]))]
z[11]
which(z[11] == min(z[11]))
min(z[11], na.rm=TRUE)
min(is.numeric(z[11]))
z[11][1877]
z[11]
z[11][1]
z[11][2]
z[11][1][1]
z[11]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack[1]
as.numeric(z[11]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack[1])
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
z <- best('MD', 'heart attack')
z$Hospital.Name
z$Hospital.Name[which(z[11 min(z[11]))]
z$Hospital.Name[which(z[11] == min(z[11]))]
z[11] <- as.numeric(z[11])
source('C:/Users/lwgra/Desktop/Coursera/programmingassignment3/best.R')
